import XHRInterface from "./utils/XHRInterface";
import Auth from "./auth/Auth";
import SignatureStatus from "./types/responses/SignatureStatus";
import ServerFile from "./types/ServerFile";
export interface SignatureListFilters {
    text?: string;
    status?: SignatureStatus;
    sort_field?: 'created' | 'filename';
    sort_direction?: 'asc' | 'desc';
    created_more_than?: string;
    created_less_than?: string;
}
declare const _default: {
    getSignatureStatus: (auth: Auth, xhr: XHRInterface, signatureToken: string) => Promise<GetSignatureStatus>;
    getSignatureList: (auth: Auth, xhr: XHRInterface, page?: number, pageLimit?: number, filters?: SignatureListFilters) => Promise<Array<GetSignatureStatus>>;
    voidSignature: (auth: Auth, xhr: XHRInterface, signatureToken: string) => Promise<void>;
    increaseSignatureExpirationDays: (auth: Auth, xhr: XHRInterface, signatureToken: string, daysAmount: number) => Promise<void>;
    sendReminders: (auth: Auth, xhr: XHRInterface, signatureToken: string) => Promise<void>;
    downloadOriginalFiles: (auth: Auth, xhr: XHRInterface, signatureToken: string) => Promise<Uint8Array>;
    downloadSignedFiles: (auth: Auth, xhr: XHRInterface, signatureToken: string) => Promise<Uint8Array>;
    downloadAuditFiles: (auth: Auth, xhr: XHRInterface, signatureToken: string) => Promise<Uint8Array>;
    getReceiverInfo: (auth: Auth, xhr: XHRInterface, receiverTokenRequester: string) => Promise<GetReceiverInfoResponse>;
    fixReceiverEmail: (auth: Auth, xhr: XHRInterface, receiverTokenRequester: string, email: string) => Promise<void>;
    fixReceiverPhone: (auth: Auth, xhr: XHRInterface, receiverTokenRequester: string, phone: string) => Promise<void>;
};
export default _default;
export type GetSignatureStatus = {
    brand_name: string | null;
    completed_on: string | null;
    created: string;
    email: string;
    expires: string;
    language: 'en-US' | 'es' | 'fr' | 'it' | 'ca' | 'zh-cn' | 'zh-tw' | 'zh-Hant' | 'zh-Hans' | 'ar' | 'ru' | 'de' | 'ja' | 'pt' | 'bg' | 'ko' | 'nl' | 'el' | 'hi' | 'id' | 'ms' | 'pl' | 'sv' | 'th' | 'tr' | 'uk' | 'vi';
    message_signer: string;
    mode: 'multiple';
    name: string;
    notes: string | null;
    signer_reminder_days_cycle: number;
    subject_cc: string | null;
    subject_signer: string | null;
    token_requester: string;
    uuid: string;
    expired: boolean;
    signers: Array<GetReceiverInfoResponse>;
    expiring: boolean;
    verify_enabled: boolean;
    files: Array<ServerFile>;
    certified: boolean;
    signer_reminders: boolean;
    status: SignatureStatus;
    uuid_visible: boolean;
    lock_order: boolean;
};
export type GetReceiverInfoResponse = {
    uuid: string;
    name: string;
    email: string;
    type: 'signer' | 'witness' | 'validator';
    token_requester: string;
    status: 'waiting' | 'sent' | 'viewed' | 'signed' | 'validated' | 'nonvalidated' | 'declined' | 'error';
    access_code: boolean;
    force_signature_type: 'all' | 'text' | 'sign' | 'image';
    notes: string | null;
    fix_email_needed: boolean;
    fix_phone_needed: boolean;
};
