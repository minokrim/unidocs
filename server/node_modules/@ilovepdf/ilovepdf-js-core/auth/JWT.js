"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_json_1 = __importDefault(require("../constants/globals.json"));
const AuthError_1 = __importDefault(require("../errors/AuthError"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const FileEncryptionKeyError_1 = __importDefault(require("../errors/FileEncryptionKeyError"));
class JWT {
    constructor(xhr, publicKey, secretKey = '', params = {}) {
        this.xhr = xhr;
        this.publicKey = publicKey;
        this.secretKey = secretKey;
        this.file_encryption_key = params.file_encryption_key;
        // Validations.
        this.validateFileEncryptionKey(this.file_encryption_key);
    }
    validateFileEncryptionKey(fileEncryptionKey) {
        if (typeof fileEncryptionKey === 'string') {
            if (fileEncryptionKey.length !== 14 && fileEncryptionKey.length !== 16 &&
                fileEncryptionKey.length !== 32) {
                throw new FileEncryptionKeyError_1.default('Encryption key shold have 16, 14 or 32 chars length');
            }
        }
    }
    getToken() {
        return __awaiter(this, void 0, void 0, function* () {
            this.verifyToken();
            // Use cache if there is a valid token.
            if (!!this.token)
                return Promise.resolve(this.token);
            // If there are public and secret key, token can be generated
            // to not generate more delay connecting with server.
            let tokenPromise;
            if (!this.secretKey) {
                tokenPromise = this.getTokenFromServer();
            }
            else {
                tokenPromise = this.getTokenLocally();
            }
            return tokenPromise.then(token => {
                // Cache token.
                this.token = token;
                return token;
            });
        });
    }
    /**
     * Verifies if this.token is well signed and not expired. In case of been
     * wrong-signed or expired, token is set to undefined to reset it.
     */
    verifyToken() {
        if (!!this.token) {
            // When there is secret key, signature and expiration date can be validated.
            if (this.secretKey) {
                try {
                    // Throws an error if token is invalid.
                    jsonwebtoken_1.default.verify(this.token, this.secretKey);
                }
                catch (error) {
                    this.token = undefined;
                }
            }
            else { // Otherwise, look only expiration date.
                const decoded = jsonwebtoken_1.default.decode(this.token);
                const { exp } = decoded;
                // Get epoch in seconds.
                const timeNow = Date.now() / 1000;
                // If it is an expired token, reset token cache.
                const isExpired = timeNow > Number(exp);
                if (isExpired)
                    this.token = undefined;
            }
        }
    }
    getTokenFromServer() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.xhr.post(`${globals_json_1.default.API_URL_PROTOCOL}://${globals_json_1.default.API_URL}/${globals_json_1.default.API_VERSION}/auth`, JSON.stringify({
                public_key: this.publicKey
            }), {
                headers: [
                    ['Content-Type', 'application/json;charset=UTF-8']
                ],
                transformResponse: res => { return JSON.parse(res); }
            })
                .then((data) => {
                const { token } = data;
                if (!token) {
                    throw new AuthError_1.default('Auth token cannot be retrieved');
                }
                return token;
            })
                .catch(e => {
                throw e;
            });
        });
    }
    getTokenLocally() {
        return __awaiter(this, void 0, void 0, function* () {
            // From milliseconds to seconds.
            const timeNow = Date.now() / 1000;
            const payload = {
                jti: this.publicKey,
                iss: globals_json_1.default.API_URL,
                // There is an error in server that does not accept
                // recent generated tokens. Due to this, iat time is
                // modified with the current time less a time delay.
                iat: timeNow - JWT.TIME_DELAY,
                file_encryption_key: this.file_encryption_key
            };
            // When execution comes here, this var always will have a value.
            const secretKey = this.secretKey;
            const token = jsonwebtoken_1.default.sign(payload, secretKey);
            // Cache token.
            this.token = token;
            return token;
        });
    }
}
// There are times between responses that servers demands
// a little delay or it does not accept
JWT.TIME_DELAY = 5;
exports.default = JWT;
//# sourceMappingURL=JWT.js.map